#!/bin/python3
from playsound import playsound
import os, select, sys, time, threading
from sys import stdout
import readline

POMS_SAVE = os.path.expanduser("~/.poms")
CHIME = os.path.join(os.path.dirname(os.path.abspath(__file__)), "chime.wav")
POMODORO_TIME = 20*60
inst = """
Press N to make a new pomodoro (Shift-N to add at the top)
Press P to do a pomodoro
Press R to redo the latest pomodoro
Press C to delete all pomodoros
Ctrl-C exits.
""".strip().split("\n")

COLORS = {
    "red": "\x1b[31m",
    "green": "\x1b[32m",
    "yellow": "\x1b[33m",
    "blue": "\x1b[34m",
    "white": "\x1b[37m",
    "grey": "\x1b[90m",
}
BCOLORS = {
    "black": "\x1b[40m",
    "red": "\x1b[41m",
    "green": "\x1b[42m",
    "yellow": "\x1b[43m",
    "blue": "\x1b[44m",
    "white": "\x1b[47m",
}
CURSOR_HIDE = "\x1b[?25l"
CURSOR_SHOW = "\x1b[?25h"
CLEARCOLOR = "\x1b[0m"

def clear_screen():
    sys.stdout.write("\x1b[2J\x1b[H")
    stdout.write(CURSOR_HIDE)
def write_left(x1, y, text, color):
    for dx, c in enumerate(text):
        blit(x1 + 2 + dx, y, BCOLORS["black"], COLORS[color], c)
    stdout.flush()
def write_centered(x1, x2, y, text, color):
    sx = (x1 + x2 - len(text))//2
    for i, c in enumerate(text):
        blit(sx+i, y, BCOLORS["black"], COLORS[color], c)
    stdout.flush()
def display_card(color, lines, label=""):
    sw, sh = os.get_terminal_size()
    width, height = max((len(x) for x in lines), default=0), len(lines)
    if label: 
        label = " " + label + " "
        width = max(width, len(label))
    width, height = width + 4, height + 4
    width = max(width, 15)
    x1, y1 = (sw-width)//2, (sh-height)//2
    x2, y2 = x1+width, y1+height
    B, F, E = BCOLORS[color], COLORS[color], BCOLORS["black"]
    
    for x in range(x1, x2):
        blit(x, y1,   B, F, " ")
        blit(x, y2-1, B, F, " ")
    for y in range(y1, y2):
        blit(x1,   y, B, F, " ")
        blit(x2-1, y, B, F, " ")
    if label:
        write_centered(x1, x2, y1, label, color)

    for dy, line in enumerate(lines): 
        write_left(x1, y1 + 2 + dy, line, color)

    stdout.flush()
    return x1+2, x2-2, y1+2, y2-1
    
def display_pom_card(task):
    x1, x2, y1, y2 = display_card("green", [task, ""])
    return x1, x2, y2-2 # Timer location
def display_prompt(prompt):
    display_card("red", [prompt])
def move (x, y):
    stdout.write("\033[%d;%dH" % (y,x))
def blit(x, y, B, F, c):
    move(1,1)
    move(x, y)
    stdout.write(B)
    stdout.write(F)
    stdout.write(c)
def display_poms(poms):
    display_card("blue", poms, "pomodoros")
def display_help():
    sw, sh = os.get_terminal_size()
    for i, line in enumerate(inst):
        write_left(0, sh-len(inst)+i, line, "green")
def update_countdown(x1, x2, y, s):
    m,s = s//60, (s%60)//1
    write_centered(x1, x2, y, "%02d:%02d" % (m,s), "grey")
def get_key():
    import tty, sys, termios
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    while True:
        try:
            tty.setraw(sys.stdin.fileno())
            INPUT_TIMEOUT = 1.0
            rlist, _, _ = select.select([sys.stdin], [], [], INPUT_TIMEOUT)
            if rlist:
                return sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
def now():
    return float(time.time())

# -------------------------------------------------
def alarm():
    def alarm_sound(stop_early, times=20):
        for i in range(times):
            if stop_early.acquire(blocking=False):
                stop_early.release()
                playsound(CHIME, block=True)
    stop_early = threading.Semaphore()
    t = threading.Thread(target=alarm_sound, args=[stop_early])
    t.start()
    kp = get_key()
    stop_early.acquire()
    return kp
def waiting(poms):
    clear_screen()
    display_poms(poms)
    display_help()
    return get_key()
def do_pomodoro(poms):
    old_size = None
    start = now()
    end = start + POMODORO_TIME
    try:
        while now() < end:
            if os.get_terminal_size() != old_size:
                old_size = os.get_terminal_size()
                clear_screen()
                x1, x2, y = display_pom_card(poms[0])
            update_countdown(x1, x2, y, end - now())
            time.sleep(0.1)
        kp = alarm()
    except KeyboardInterrupt:
        kp = "q"
    return kp, poms.pop(0)
def confirm(prompt):
    clear_screen()
    display_prompt(prompt + " (Y/N)")
    while True:
        kp = get_key()
        if kp in "Yy": return True
        if kp in "Nn\x03": return False
def do_new(poms, pos):
    clear_screen()
    stdout.write(CURSOR_SHOW)
    stdout.write(CLEARCOLOR)
    new = input("New pomodoro: ")
    if new.strip() == "": return
    poms.insert(pos, new)
def save(poms):
    with open(POMS_SAVE, "w") as f:
        for pom in poms:
            f.write(pom + "\n")
def load():
    if not os.path.exists(POMS_SAVE): return []
    with open(POMS_SAVE, "r") as f:
        return [x.strip() for x in list(f) if x.strip() != ""]

if __name__ == '__main__':
    poms, latest_pomodoro = load(), None
    while True:
        kp = waiting(poms)
        if kp is None: continue
        if kp in "Cc":
            if confirm("Really delete all pomodoros?"):
                poms = []
        if kp in "Pp" and len(poms) > 0:
            kp, latest_pomodoro = do_pomodoro(poms)
        while kp in "Rr" and latest_pomodoro is not None:
            poms.insert(0, latest_pomodoro)
            kp, latest_pomodoro = do_pomodoro(poms)
        if kp == "N":
            do_new(poms, 0)
        if kp == "n":
            do_new(poms, len(poms))
        save(poms)
        if kp == "\x03": # Ctrl-C
            clear_screen()
            stdout.write(CURSOR_SHOW + CLEARCOLOR)
            exit()
