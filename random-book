#!/bin/python
import configparser, os, random, subprocess, tempfile, time, zipfile

def random_book(bookdir):
    # First, pick a random zip file
    while os.path.isdir(bookdir):
        bookdir = os.path.join(bookdir, random.choice(os.listdir(bookdir)))
    if not bookdir.endswith(".zip"):
        with open(bookdir) as f:
            print(bookdir)
            return f.read()
    with zipfile.ZipFile(bookdir) as zip:
        book = random.choice(zip.namelist())
        book = zip.open(book)
        return book.read()

PREFIX = b"""<html>
<head>
<title>A randomly chosen book</title>
<style>
    html {
        width: 100%;
    }
    body {
        margin-left: 20%;
        width: 30em;
        font-size: 16pt;
        white-space: pre-wrap;
    }
</style>
</head>
<body>
"""
POSTFIX = b"""
</body>
</html>
"""
def htmlify(text):
    return PREFIX + text + POSTFIX

def is_language(text, requested):
    try:
        import langdetect
    except ModuleNotFoundError:
        return True
    
    try:
        return requested == langdetect.detect(text)
    except:
        return False

BLACKLIST="""
u.s.
""".strip().split("\n")

WHITELIST="""
assassin
""".strip().split("\n")

def blacklisted(text, blacklist):
    text = text.lower()
    for word in blacklist:
        if text.count(word.lower()) > 10:
            return True
whitelisted = blacklisted

def suitable(text):
    text = text.decode('utf8')
    if not is_language(text, "en"):
        return False
    if blacklisted(text, BLACKLIST):
        return False
    if not whitelisted(text, WHITELIST):
        return False
    return True

if __name__ == '__main__':
    config_path = os.path.join(os.path.dirname(__file__), ".random-book.ini")
    assert os.path.exists(config_path)
    config = configparser.ConfigParser()
    config.read(config_path)
    bookdir = os.path.expanduser(config.get("General", "book_directory", fallback="~/books"))

    while not suitable(text := random_book(bookdir)): pass

    content = htmlify(text)
    with tempfile.NamedTemporaryFile(suffix=".html") as t:
        path = t.name
        t.write(content)
        if "DISPLAY" in os.environ:
            subprocess.Popen(["chromium", f"file://{path}"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.run(f"w3m {path} -cols 80 | less", shell=True)
        time.sleep(0.2)
